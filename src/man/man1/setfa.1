.\" $Revision: 1.30 $
.ds ]W Sun Microsystems
.\" SAM-QFS_notice_begin
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at pkg/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at pkg/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"
.\" Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
.\" Use is subject to license terms.
.\"
.\" SAM-QFS_notice_end
.TH setfa 1 "20 May 2008"
.na
.nh
.SH NAME
setfa \- Sets file attributes for block or object file systems
.SH SYNOPSIS
\fBsetfa\fR for block-based file systems:
.sp
\fBsetfa\fR
.RB [ \-A " allocahead[k|m|g]" ]
.RB [ \-B ]
.RB [ \-d ]
.RB [ \-D ]
.RB [ \-f ]
.br
.RB [ \-g " stripe_group" ]
.RB [ \-l " length[k|m|g]" ]
.RB [ \-L " length[k|m|g]" ]
.br
.RB [ \-q ]
.RB [ \-r " dirname" ]
.RB [ \-s " stripe" ]
.RB [ \-V\fR]
\fIfilename .\|.\|.\|
.PP
\fBsetfa\fR for object-based file systems:
.sp
\fBsetfa\fR
.RB [ \-B ]
.RB [ \-d ]
.RB [ \-D ]
.RB [ \-f ]
.RB [ \-h " obj_width" ]
.br
.RB [ \-o " object_group" ]
.RB [ \-r " dirname" ]
.br
.RB [ \-v " obj_depth[k|m|g]" ]
.RB [ \-V\fR]
\fIfilename .\|.\|.\|
.SH AVAILABILITY
SUNWsamfs
.SH DESCRIPTION
The \fBsetfa\fR command
sets attributes for a new or existing file.
The file is created if it
does not already exist.
.PP
When file attributes are set on a directory, files and directories
subsequently created in that directory inherit those attributes.
.SH GENERIC OPTIONS
This command accepts the following options for block-based and object-based
file systems:
.TP 10
\fB\-B\fR
Permanently clears the direct I/O attribute for this file.
This means that data is transferred indirectly between the
user's buffer and disk through the system's buffer cache.
.sp
For more information, see the \fBdirectio\fR(3C) man page.
The \%SAM-QFS buffered I/O attribute is persistent,
remaining until the attribute is reset or the file is destroyed.
.TP
\fB\-d\fR
Resets all file attributes to the default attributes.
When \fB\-d\fR is specified, attributes are first
reset to the default, then other \%attribute-setting options
are processed.
.TP
\fB\-D\fR
Permanently sets the direct I/O attribute for this file.
This means that data is transferred directly between the
user's buffer and disk.
This attribute should only be set for large, \%block-aligned,
sequential I/O.
The default I/O mode is buffered (uses the page cache).
Direct I/O is not used if the file is currently memory mapped.
.sp
For more information, see the \fBdirectio\fR(3C) man page.
The \%SAM-QFS direct I/O attribute is persistent,
remaining until the attribute is reset or the file is destroyed.
.TP
\fB\-f\fR
Supresses errors.
.TP
\fB\-r\ \fIdirname\fR
Recursively performs the operation (setting file attributes) for any files
contained in the specified \fIdirname\fR or its subdirectories.
If no \%\fIfilename\fR is specified,
a \%\fB\-r\ \fIdirname\fR must be specified.
.TP
\fIfilename\fR
Specifies the file for which attributes are being set.
If no \%\fB\-r\ \fIdirname\fR is specified,
a \fIfilename\fR must be specified.
If \%\fB\-r\ \fIdirname\fR is specified, a \fIfilename\fR specification
is optional.
.TP
\fB\-V\fR
Enables the verbose display.
A message is written for each file on
which attributes are set.
.SH BLOCK FILE SYSTEM OPTIONS
This command accepts the following options for block-based file systems only:
.TP 10
.BI \-A " allocahead"
Specifies the number of bytes to be allocated ahead of a write to the file.
The \fIn\fR must be an integer
and must be greater than or equal to one kilobyte and less than 4 terabytes.
The \fIn\fR is rounded down to units of kilobytes.
The integer specified may be followed by \fBk\fR (for
kilobytes), \fBm\fR (for megabytes), or \fBg\fR (for gigabytes).
For example:
.sp
\fB\-A 1m\fR
.sp
This option is only valid for a regular file. This option should be
used when writing large files where more sequential allocation is
desired. Note, when the file is closed the blocks are reset to the
size of the file.
.TP
\fB\-g\ \fIstripe_group\fR
Specifies the number of the striped group in which the file is to be
allocated first.
For \fIstripe_group\fR, specify a number such
that 0\ \(<=\ \fIstripe_group\fR\ \(<=\ 127
and is a stripe group defined in the file system.  If \%round-robin is
set (see the \fB\-s\fR option),
the file is completely allocated on the
designated stripe group.
.sp
Note that the \fIstripe_group\fP attribute is inherited.  It is
possible to create a directory and set a stripe group for that directory.
Then, all files created in that directory are allocated on the
specified stripe group.
In the following example, files created in \fBaudio\fR are
allocated on striped group \fB0\fR,
and files created in \fBvideo\fR are allocated on stripe
group \fB1\fR:
.sp
.nf
.ft CO
setfa -g 0 -s 0 audio
setfa -g 1 -s 0 video
.fi
.ft
.TP
\fB\-l\ \fIlength\fR
Specifies the number of bytes to be preallocated to the file.
This can be specified only for a file with no disk blocks assigned.
This option is ignored for a directory.  If an I/O event attempts
to extend a preallocated file, the caller receives an \fBENXIO\fR
error.
If an attempt is made to preallocate a file with disk blocks assigned,
or a segmented file, the caller receives an \fBEINVAL\fR error.
.TP
.BI \-L " length"
Specifies the number of bytes to be preallocated to the file.
The \fIn\fR must be an integer.
The integer specified may be followed by \fBk\fR (for
kilobytes), \fBm\fR (for megabytes), or \fBg\fR (for gigabytes).
For example:
.sp
\fB\-L 1g\fR
.sp
This option is only valid for a regular file.
The \fBL\fP option allocates using standard allocation. This means striping
is supported. This also means the file can be extended.
The \fBL\fP and \fBl\fP options are mutually exclusive.
.TP
\fB\-q\fR
Specifies that this file will be linked to the pseudo character device
driver, samaio, for the purpose of issuing async I/O. Note, this option
also sets Direct I/O and qwrite. Setting this option may result in greater
performance.  This option is not valid when applied against
certain system files and directories such as lost+found.
.TP
\fB\-s\ \fIstripe\fR
Specifies the number of allocation units to be allocated
before changing to the next unit.  If \fIstripe\fR is 1,
the file is striped across all units with 1 disk
allocation unit (DAU) allocated per unit.  If  \fIstripe\fR is 0,
the file is allocated on one unit until that
unit has no space.  The default stripe is specified when the file
system is mounted.  For more information, see \fBmount_samfs\fR(1M)\fR).
.sp
An \fBInvalid argument\fR message is generated if
a \fIstripe\fR\ >\ 0 is specified and
mismatched stripe groups exist.
A stripe group is said to be \fImismatched\fR if all striped
groups do not have the same number of partitions.
Striping across mismatched stripe groups is not allowed.
.SH OBJECT FILE SYSTEM OPTIONS
This command accepts the following options for object-based file systems only:
.TP 10
\fB\-h\ \fIobj_width\fR
Specifies the number of object storage devices (OSD) in the stripe.
The OSD units to be striped for this file are in the
\fIobject_group\fR specified by the \fBo\fR option.
If \fIobj_width\fR is 0, the file is striped across all the
units in the object group. If \fIobj_width\fR is >= 1,
the file is striped across \fIobj_width\fR units.
.sp
The \fIobj_width\fR may only be set on directories. Files inherit the
\fIobj_width\fR on creation.
All files created in the directory are striped across the
specified number of OSD units in the object group.
The default stripe width is specified by the \fIobj_width\fR
mount option.  For more information, see \fBmount_samfs\fR(1M)\fR).
.sp
The length of allocation on one unit before
changing to the next unit is specified by the \fIv\fR option.
.sp
In the following example, files created in \fBaudio\fR are
created on one object storage device (OSD) in the object group \fB0\fR,
and files created in \fBvideo\fR are striped across 8 units with a
512KB allocation on each unit before switching to the next unit in the
object group \fB1\fR:
.sp
.nf
.ft CO
setfa -o 0 -h 1 audio
setfa -o 1 -h 8 -v 512k video
.fi
.ft
.TP
\fB\-o\ \fIobject_group\fR
Specifies the number of the object group on which the file is to be
created.
For \fIobject_group\fR, specify a number such
that 0\ \(<=\ \fIobject_group\fR\ \(<=\ 127
and is a object group defined in the object-based file system.
The default object group is the first group defined in the file system.
.sp
Note that the \fIobject_group\fP attribute is inherited.  It is
possible to create a directory and set a object group for that
directory. Then, all files created in that directory are allocated on the
specified object group.
.TP
\fB\-v\ \fIobj_depth\fR
Specifies the number of bytes to be allocated to one OSD unit before
switching to the next OSD unit in the stripe.
The \fIobj_depth\fR may only be set on directories. Files inherit the
\fIobj_depth\fR on creation.
The default stripe depth is specified by the \fIobj_depth\fR
mount option.  For more information, see \fBmount_samfs\fR(1M)\fR).
.sp
The \fIobj_depth\fR must be an integer.
The integer specified may be followed by \fBk\fR (for
kilobytes), \fBm\fR (for megabytes), or \fBg\fR (for gigabytes).
For example:
.sp
\fB\-v 1m\fR
.sp
\fIobj_depth\fR is rounded down
to the nearest power of 2 integer.
.SH SEE ALSO
\fBarchive\fR(1),
\fBrelease\fR(1),
\fBssum\fR(1),
\fBstage\fR(1).
.PP
\fBmount_samfs\fR(1M).
.PP
\fBdirectio\fR(3C).
